{"version":3,"sources":["libs/Processor.js","utils/useWindowDimensions.js","components/View.js","components/Select.js","components/WindowInterval.js","components/Range.js","components/DataSets.js","components/InitInputGroup.js","components/RangeInterval.js","components/Stats.js","components/Home.js","index.js"],"names":["module","exports","string","Matrix","STRING","Head","CurrentIndex","getHead","split","filter","e","trim","length","getBody","body","slice","temp","i","push","setData","query","head","matrix","queryString","var_index","indexOf","targetArray","console","log","exposeIndex","incrementIndex","getWindowDimensions","window","width","innerWidth","height","innerHeight","createOptions","showLine","xLabelName","darkMode","fileName","fontColor","gridColor","title","display","text","fontSize","legend","labels","animation","duration","showLines","scales","xAxes","scaleLabel","labelString","gridLines","drawOnChartArea","drawTicks","color","ticks","autoSkip","maxTicksLimit","yAxes","responsive","createDataSet","array","select","states","rangeObj","theme","start","end","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","View","props","useState","options","ready","_data","windowHeight","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","className","id","Select","ops","setOptions","status","variables","defaultValue","onChange","document","getElementById","selectedVar","selectedIndex","setSelect","value","disabled","map","item","key","name","WindowInterval","React","forwardRef","ref","range","Object","values","maxValue","setRange","dataReady","evaluateAndUpdate","lb","up","max","cb","type","min","placeholder","upperBound","Number","target","Range","slideMax","dataArrayLength","intervalRef","useRef","dataObj","leftIndex","rightIndex","current","children","DataSection","index","currentDataset","dataSets","setFileName","setArray","availableFiles","fileObj","InitInputGroup","changeTheme","darkTheme","transition","documentElement","setAttribute","setColorTheme","classList","add","setTimeout","remove","onClick","hidden","handleUpload","autoComplete","htmlFor","Slider","RangeInterval","allowCross","lower","upper","Mean","Variance","Stats","mean","star","reduce","a","b","toFixed","num","count","n","toCustomFit","LocalMean","elem","Math","pow","variance","dataUtils","require","Home","_dataObj","_select","_array","_range","_darkMode","setMode","_datasets","setDatasets","_dataSetNames","setDataSetNames","_currFileName","fileToLoad","files","reader","FileReader","onload","ev","result","concat","readAsText","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.57bf78c0.chunk.js","sourcesContent":["// The data processor class \n// Used function scope for better security over class\n// returns a object with private values and public functions\n\nfunction Processor(string){\n    // Think of these as private variables \n    var STRING=\"init\";\n    var Head = \"init\";\n    var Matrix;\n    var CurrentIndex = 1;\n    \n    // thing of these as public functions you can use to modify the interal private variables\n    const setData = (string) => {\n        STRING = string;\n    } //allow calling following methods without params\n\n    // keep an id inside an instance of this function to keep track of the datasets in memory by assigning them ids\n    const exposeIndex = () =>{\n        return CurrentIndex;\n    }\n\n    const incrementIndex = () =>{\n        CurrentIndex+=1;\n    }\n\n    // head == the first row of the dataset or the variables in the dataset \n    const getHead = (string=STRING) => {\n        Head = string.split(\"\\n\")[0].split(/(\\s+)/).filter(e => e.trim().length>0);\n        return Head;\n    };\n\n    // parse the rest of the text into a matrix where each column is a variable and each row is an iteration of the variables -> as if reading the plain text directly into a matrix\n    const getBody = (string=STRING) => {\n        // matrix without state values \n        var body = string.split(\"\\n\").slice(1);\n        var temp=[]\n        for(let i=0; i<body.length; i++){\n            temp.push(body[i].split(/(\\s+)/).filter(e => e.trim().length>0));\n        }\n        Matrix = temp;\n        return temp;\n    }\n\n    const query = (head=Head, matrix=Matrix, queryString) => {\n        // returns an array with the correct variable\n        var var_index = head.indexOf(queryString);\n        if(var_index === -1){\n            console.log(\"bad query\");\n            return;\n        }\n\n        var targetArray = [];\n        for(let i=0; i<matrix.length; i++){\n            targetArray.push(matrix[i][var_index]);\n        }\n        return targetArray;\n    }\n\n    return {    \n        getHead,\n        getBody,\n        setData,\n        query,\n        exposeIndex,\n        incrementIndex\n    }\n}\n\nmodule.exports = Processor;","import {useState, useEffect} from 'react';\n\n// Just a function that calculates the height of the user screen -> only used by view.js to determine how tall the graph element needs to be \n\nfunction getWindowDimensions(){\n    const { innerWidth: width, innerHeight: height } = window;\n    return{\n        width,\n        height\n    };\n};\n\nexport default function useWindowDimensions(){\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n    useEffect(() => {\n        function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}","import React, {useEffect, useState} from 'react';\nimport useWindowDimensions from '../utils/useWindowDimensions'\nimport {Line} from 'react-chartjs-2';\n\n/* Main graph window\n\nUse third party react-chartjs-2 to power the visualization\n\nuseWindowDimensions -> specific util function calculating the height of the window \nThe result windowHeight is not very accurate but is responsive -> I found the windowHeight/8 is the best height for the graph relative to the UI\n */\n\nfunction View(props){\n    /*\n    props: head(array), array(array), select(string), rangeObj({start: , end: }), darkMode(bool), fileName(string)\n    */\n    const [_data, setData] = useState({data:{}, options:{} ,ready:false});\n\n    // get height: \n    const windowHeight = useWindowDimensions().height;\n\n    // PROP -> listen to change in array or range\n    useEffect(() => {\n        setData({\n            data: createDataSet(props.array.data, props.select, props.head, props.array.states, props.rangeObj, props.darkMode), \n            options: createOptions(true, \"Iterations\", props.darkMode, props.fileName),\n            ready: props.array.ready // only render if array is ready\n        });\n    },[props.array, props.rangeObj, props.darkMode, props.fileName, props.head, props.select]);\n\n    // render 'To Plot Variable' screen if select var is at default 'init' -> will need to change if there is a variable that is called 'init'\n    return (\n        <div className=\"view\" id=\"component\">\n            {props.select !== 'init' ? ( \n                <Line height={windowHeight/8} id=\"line-graph\" data={_data.data} options={_data.options}/>\n            ) : (\n                <div id=\"no-input-div\"> <div>To Plot Variable : Select In {props.fileName}</div> </div>\n            )}\n        </div>\n    );\n};\n\n// To modify the look and specificy of the graphs, modify the following functions\n// Check out https://www.chartjs.org/docs/latest/ for relative documentation \n\n// creat the option object for charts.js\nfunction createOptions(showLine, xLabelName, darkMode, fileName){\n    const fontColor = darkMode ? 'white' : 'grey';\n    const gridColor = darkMode ? '#bababa' : '#3b3b3b';\n\n    return {\n        title:{\n            display: true,\n            text: fileName,\n            fontColor: fontColor,\n            fontSize: 20\n        },\n        legend:{\n            labels:{\n                fontColor: fontColor\n            }\n        },\n        animation:{\n            duration: 0\n        },\n        showLines: showLine,\n        scales: {\n            xAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: xLabelName,\n                    fontSize: 16,\n                    fontColor: fontColor\n                },\n                gridLines : {\n                    drawOnChartArea:false,\n                    drawTicks: true,\n                    color: gridColor\n                },\n                ticks: {\n                    autoSkip: true,\n                    maxTicksLimit: 10,\n                    fontColor: fontColor\n                }\n            }],\n            yAxes :[{\n                gridLines: {\n                    drawOnChartArea:false,\n                    drawTicks: false,\n                    color: gridColor\n                },\n                ticks: {\n                    fontColor: fontColor\n                }\n            }]\n        },\n        responsive: true   \n    };\n}\n\n// create data set object for charts.js\nfunction createDataSet(array, select, head, states, rangeObj, darkMode){\n    const darkTheme = ['rgba(101,190,242,1)', 'rgba(240, 249, 255,1)', 'rbga(255,74,74,1)'];\n    const lightTheme = ['rgba(240,145,83,1)', 'rbga(255, 243, 235, 0.5)', 'rbga(0,153,255,1)'];\n    const theme = darkMode? darkTheme : lightTheme;\n    \n    const data = {\n        labels: states.slice(rangeObj.start,rangeObj.end),\n        datasets: [\n            {\n                label: select,\n                fill: false,\n                lineTension: 0.1,\n                backgroundColor: '#00a2ff',\n                borderColor: theme[0],\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: theme[1],\n                pointBackgroundColor: theme[0],\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: theme[2],\n                pointHoverBorderColor: theme[2],\n                pointHoverBorderWidth: 2,\n                pointRadius: 3,\n                pointHitRadius: 10,\n                data: array.slice(rangeObj.start,rangeObj.end)\n            }\n        ]\n    };\n    return data;\n}\nexport default View;","import React, {useState, useEffect} from 'react';\n\n// handle variable selection change \nfunction Select(props){\n    const [ops, setOptions] = useState([\"default\"]);\n    // props: variables(array), status(boolean), setSelect(function)\n\n    // populate variable selcetion drop down menu when there is a change to variables\n    useEffect(() => {\n        if(props.status){\n            setOptions(props.variables.slice(1));\n        }\n    },[props.variables, props.status]);\n    \n    function selectChange(){\n        var e = document.getElementById(\"selector\");\n        // extract text from selected var\n        var selectedVar = e.options[e.selectedIndex].text;\n        props.setSelect(selectedVar)\n    }\n\n    return(\n        <div className=\"select\">\n            <p>Variables: &nbsp;</p> \n            <span id=\"dropdown\">\n                <select id=\"selector\" defaultValue=\"DEFAULT\"  onChange={selectChange}>\n                    <option value=\"DEFAULT\"  disabled> \n                        Select a variable to plot \n                    </option> \n                    {ops.map(item => (\n                        <option key={item} name={item} value={item}>{item}</option>\n                    ))}\n                </select>\n            </span>\n        </div>\n    )\n}\n\nexport default Select;","import React from 'react';\n\n// declare component as constant and wrap it in React.forwardRef, which allows the component to take a reference. Must use forwardRef if using functional components\nconst WindowInterval = React.forwardRef((props, ref) => {\n\n  // props: rangeObj, setRange(), dataReady, maxValue(data length)\n  const range = Object.values(props.rangeObj); // -> [lower, upper]\n  const maxValue = props.maxValue;\n  const setRange = props.setRange;\n  const dataReady = props.dataReady;\n\n  function onLowerBoundChange(e){\n    // takes upperbound value if any, else use placeholder\n    const upperBound = Number(document.getElementById('upperbound').value) || Number(document.getElementById('upperbound').placeholder); \n    const lowerBound = Number(e.target.value); \n    return evaluateAndUpdate(lowerBound, upperBound, maxValue, setRange);\n  }\n\n  function onUpperBoundChange(e){\n    const lowerBound = Number(document.getElementById('lowerbound').value) || Number(document.getElementById('lowerbound').placeholder);\n    const upperBound = Number(e.target.value);\n    return evaluateAndUpdate(lowerBound, upperBound, maxValue, setRange);\n  }\n\n  function evaluateAndUpdate(lb, up, max, cb){\n    if (lb >= 0 && up > lb ){\n      if(up <= max && lb < up){\n        return cb({start:lb, end:up});\n      }\n    }\n  }\n\n  // note the ref on div#text-select-display -> this is the HTML elem that the reference is pointing to in Range.js\n  return(\n    <div className=\"window-interval\">\n        {dataReady ? (\n            <form id=\"interval-form\">\n              <div id=\"text-select-display\" ref={ref}>\n                <label> Showing iteration </label> \n                &nbsp;\n                <input id=\"lowerbound\" type=\"number\" min={0} placeholder={range[0]} onChange={onLowerBoundChange}/> \n                &nbsp;\n                <label>to iteration </label>\n                &nbsp;\n                <input id=\"upperbound\" type=\"number\"  min={0} placeholder={range[1]} onChange={onUpperBoundChange}/>\n              </div>\n            </form>\n        ) : (\n          null\n        )}\n    </div>\n  )\n})\n\nexport default WindowInterval;","import React, {useEffect} from 'react';\nimport WindowInterval from './WindowInterval';\n\nfunction Range(props){\n    /*\n    props: dataObj, onUpdate(), rangeObj. dataArrayLength, setRange() onSliderMove()\n    */\n    \n    const range = props.rangeObj.end - props.rangeObj.start;\n    const slideMax = props.dataArrayLength - range;\n\n    // pass reference to child component and attach to a selected HTML element \n    // in this case we attach it to the div that contains the two text input field\n    const intervalRef = React.useRef() \n\n    function resetInputFields(){\n        // if child component is mounted -> reset text input field on slider drag  \n        if(intervalRef.current){\n            intervalRef.current.children[1].value = ''; // lowerbound input text field\n            intervalRef.current.children[3].value = ''; // upperbound ...\n        }\n    }\n    \n    function onChange(e){\n        let leftIndex = Number(e.target.value);\n        let rightIndex = leftIndex + range;\n\n        // range check, right index should not exceed the length of the data array\n        if(rightIndex > props.dataArrayLength){\n            rightIndex--;\n        }\n        // set new range\n        props.setRange({start:leftIndex, end:rightIndex});\n\n        // reset input field if either input fields have value\n        if( intervalRef.current.children[1].value !== '' || intervalRef.current.children[3].value !== '' ){\n            resetInputFields();\n        }\n    }\n    // update maximum on slider elem when there is a change to the range \n    useEffect(()=>{\n        document.getElementById(\"window-slider\").max = slideMax;\n    },[props.rangeObj, slideMax])\n\n    return (\n        <div id=\"range-input-window\">\n            <div className=\"range\">\n                <div id=\"slide-window-text\">\n                    <p>Slide Window:</p>\n                </div> \n                <input\n                    id=\"window-slider\"\n                    type=\"range\"\n                    defaultValue={0}\n                    max={props.dataObj.ready? slideMax:100}\n                    onChange={onChange}\n                    >\n                </input>\n            </div>\n            <WindowInterval \n                ref={intervalRef} \n                rangeObj={props.rangeObj} \n                setRange={props.setRange} \n                dataReady={props.dataReady} \n                maxValue={props.maxValue}\n            />\n        </div>\n    )\n}\n\nexport default Range;\n","import React from 'react';\n// Handle switching of data sets\nfunction DataSection(props){\n    // props: availableFiles(obj{id, fileName}), setData(func), dataSets (obj)\n    const handleOnChangeState = (e) => {\n        let index = e.target.value -1; //DataStore index starts at 1 \n        const currentDataset = props.dataSets[index];\n        props.setData({\n            head: currentDataset.head,\n            data: currentDataset.data,\n            ready: true\n        })\n        //update currently selected file\n        props.setFileName(currentDataset.name);\n        // toggle View.js render status on new file selection. -> return to init message\n        props.setArray({\n            states: props.array.states,\n            data: props.array.data,\n            ready: false\n        }); //Note -> while the only property that matters here is array.ready, you can not ignore other properties in a useState set function, else they become null\n        \n        // return variable select to default\n        document.getElementById('selector').value='DEFAULT';\n        // set select back to default\n        props.setSelect(\"init\")\n        // return range obj to init \n        props.setRange({start:0, end:200});\n        // return window-slider to 0\n        document.getElementById('window-slider').value = 0;\n    }\n\n    return(\n        <div className=\"data-section\">\n            <div id=\"choose-data-set-text\">\n                <p>Choose DataSet:</p>\n            </div>\n            &nbsp; \n            <select id=\"data-selector\" defaultValue=\"DEFAULT\" onChange={handleOnChangeState}>\n                <option key=\"def\" value=\"DEFAULT\" disabled> \n                    Select Data Set  \n                </option>\n                {props.availableFiles.map( fileObj => (\n                    <option key={fileObj.id} value={fileObj.id}>{fileObj.fileName}</option>\n                ))}\n            </select>\n        </div>\n    )\n}\n\nexport default DataSection;","import React from 'react';\nimport { FaUpload } from 'react-icons/fa'\n\n/* What the user sees before a dataset is uploaded\n\nRepalce the lorem text with a description of the application\n*/\n\nconst lorem = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n\nfunction InitInputGroup(props) {\n    //props setColorTheme() -> setting dark or white mode\n\n    // toggles light and dark mode\n    function changeTheme(darkTheme){\n        if(darkTheme){\n            transition();\n            document.documentElement.setAttribute('data-theme', 'dark');\n            props.setColorTheme(true);\n        }\n        else{\n            transition();\n            document.documentElement.setAttribute('data-theme', 'light');\n            props.setColorTheme(false);\n        }\n    }\n\n    function transition(){\n        document.documentElement.classList.add('transition');\n        setTimeout(() => {\n            document.documentElement.classList.remove('transition');\n        }, 1000);\n    }\n    return(\n        <div className=\"input-panel\">\n            <h1 id=\"project-name\">Time Series Plotter</h1>\n            <p id=\"project-description\"> \n                {lorem}\n            </p>\n            <div id=\"theme-changer\">\n                <div id=\"light\" onClick={ ()=> changeTheme(false) } value={false}><div id=\"inner-default\" ><p>Light Theme</p></div></div>\n                <div id=\"dark\" onClick={ ()=> changeTheme(true) }><div id=\"inner-dark\"><p>Dark Theme</p></div></div>\n            </div>\n            <div id=\"input-select-panel\">\n                <input name=\"file\" id=\"file\" type ='file' hidden onChange={props.handleUpload} autoComplete=\"off\"/>\n                <label htmlFor=\"file\" id=\"file-label-panel\"> <FaUpload/> Choose File To Begin Plotting </label>\n            </div>\n        </div>\n    )\n};\n\nexport default InitInputGroup;","import React from 'react';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nconst Range = Slider.Range;\n\n/* Two handle slider\n\nuses thrid party lib rc-slider\ncheck out https://github.com/schrodinger/rc-slider for more \n*/\n\nfunction RangeInterval(props){\n    // unpacking props -> optional\n    const maxValue = props.maxValue;\n    const setRange = props.setRange;\n    const dataReady = props.dataReady;\n    \n    function onSliderChange(value){\n        if(dataReady){\n            const [lower, upper] = value;\n            setRange({start:lower, end:upper});\n        }\n    }\n\n    return(\n        <div className=\"range-interval\">\n            <Range \n                allowCross={false} \n                value={Object.values(props.rangeObj)} \n                onChange={onSliderChange} \n                max={maxValue}\n            />\n        </div>\n    )\n}\n\nexport default RangeInterval;","import React from 'react';\n\n// maintain variable outside of function to avoid reset on component rerender\nvar Mean = 0;\nvar Variance = 0;\n\nfunction Stats(props){\n    //props rangeObj{start:, end:}, array({data:, ready: ,states:}) select(String)\n    function mean(){\n        // if array is not in initial state\n        let targetArray = props.array.data.slice(props.rangeObj.star,props.rangeObj.end);\n        const Total = targetArray.reduce((a, b)=> Number(a)+Number(b), 0);\n        return Total/targetArray.length;\n    }\n\n    function variance(){\n        const LocalMean = mean();\n        let targetArray = props.array.data.slice(props.rangeObj.star,props.rangeObj.end);\n        \n        let sums = targetArray.map( elem =>{\n            let diff = Math.pow(Number(elem) - LocalMean,2);\n            return diff;\n        })\n\n        let Sum = sums.reduce((a,b)=> Number(a) + Number(b),0)\n        return Sum/Number(targetArray.length -1);\n    }\n    \n    // trim off additon decimal points after the FIRST THREE NON ZERO numbers\n    function toCustomFit(num){        \n        if (num > 1) return num.toFixed(3);\n        var count = 0\n        var n = num;\n        while (n <= 1){\n            n = n *10;\n            count += 1;\n        }\n        return num.toFixed(count + 2)\n    }\n\n    // normal case\n    if (props.array.data.length > 1){\n        Mean = mean().toFixed(3);\n        Variance = toCustomFit(variance());\n    }\n    // is no points are shown \n    else{\n        Mean = 0;\n        Variance = 0;\n    }\n    // if nothing selected -> set stats back to 0 \n    if (props.select === 'init'){\n        Mean = 0; \n        Variance = 0;\n    }\n    \n    return(\n        <div className=\"statistics\">\n            <div id=\"stat-lines\">\n                <div id=\"mean-wrapper\">\n                    <p>Mean: &nbsp;</p> \n                    <div>\n                        <div>{Mean}</div> \n                    </div>\n                </div>\n                &nbsp; &nbsp; &nbsp;\n                <div id=\"variance-wrapper\">\n                    <p>Variance: &nbsp;</p> \n                    <div>\n                        <div>{Variance}</div> \n                    </div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Stats;","import React, { useState, useEffect} from 'react';\nimport View from './View.js';\nimport Select from './Select';\nimport Range from './Range';\nimport DataSection from './DataSets'\nimport InitInputGroup from './InitInputGroup';\nimport RangeInterval from './RangeInterval';\nimport Stats from './Stats';\nimport { FaUpload } from 'react-icons/fa'; //file upload icon for upload button\nconst DataProcessor = require('../libs/Processor');\n\n/* home page \n- Initializes all states and pass down to children \n- Only prop is prop.dataFileNames -> use to collect names of inputted files.\n*/\n\n// declare outside of component becase need to keep track of internal data;\nconst dataUtils = new DataProcessor();\n\nfunction Home(props){\n    // Collection of states that needs to persist beyond each render\n    const [_dataObj, setData] = useState({ data:\"\", head:\"\", ready:false }); //input dataset \n    const [_select, setSelect] = useState(\"init\");  // variable being displayed\n    const [_array, setArray] = useState({states:[\"init\"], data:[\"init\"], ready:false}); // selected variable data only\n    const [_range, setRange] = useState({start:0, end:200}); // number of variables displayed at onece \n    const [_darkMode, setMode] = useState(false); // toggle dark or light mode \n    const [_datasets, setDatasets] = useState([]); // array of all dataset data \n    const [_dataSetNames, setDataSetNames] = useState([]); // names of datasets, used to populate DataSection drop down menu \n    const [_currFileName, setFileName] = useState(\"default\"); // current selected file name, used for inital display on data set change \n\n    const handleUpload = () => {\n        // Runs ONLY when users upload a new data set\n        var fileToLoad = document.getElementById(\"file\").files[0]\n        setFileName(fileToLoad.name);\n        var reader = new FileReader();\n        reader.onload = (ev) => {\n            \n            // feed data to the data processor instance \n            // will keep track of the data set and can be outputted easily \n            dataUtils.setData(ev.target.result);\n            \n            // store data in state as an object\n            setDatasets(_datasets.concat({\n                name: fileToLoad.name,\n                head: dataUtils.getHead(),\n                data: dataUtils.getBody()\n            }));\n\n            setData({   \n                head : dataUtils.getHead(),\n                data : dataUtils.getBody(),\n                ready: true\n            });\n\n            // set array.ready to false on new file upload so View renders welcoming message \n            setArray({\n                states: _array.states,\n                data: _array.data,\n                ready: false\n            });\n\n            // return variable select to default -> note a better way to do this is by using forwardRef but in this case this is fine because element 'selector'\n            // will always be mounted before a unser can click on the upload button. Same applies to all the native HTML elemet selections \n            document.getElementById('selector').value='DEFAULT';\n            // return range obj to init \n            setRange({start:0, end:200});\n            // return window-slider to 0\n            document.getElementById('window-slider').value = 0;\n            //append to FileNameArray\n            setDataSetNames(_dataSetNames.concat({id:dataUtils.exposeIndex(),fileName:fileToLoad.name}));\n            //return _select to 'init'\n            setSelect('init');\n            //set DataSection select to newly uploaded file\n            document.getElementById('data-selector').value = dataUtils.exposeIndex();\n            //increment dataset index by 1\n            dataUtils.incrementIndex();\n        }\n        // read the actual file, which calls the above function \n        reader.readAsText(fileToLoad);\n    }\n\n    // captures new variable array when variable selection changes\n    useEffect(() => {\n        if(_select!==\"init\"){\n            setArray({\n                states: dataUtils.query(_dataObj.head, _dataObj.data, _dataObj.head[0]),\n                data: dataUtils.query(_dataObj.head, _dataObj.data, _select), \n                ready: true\n            });\n        }\n    },[_select, _dataObj])\n\n    return(\n        <div className=\"home\" id=\"home-main\">\n            {/* conditional rendering -> only render view if there is a dataset present */}\n            {_dataObj.ready ? \n                ( <div id=\"data-ready-group\">\n                    <div id=\"statisics-wrapper\">\n                        <Stats \n                            array={_array} \n                            rangeObj={_range} \n                            select={_select}\n                        />\n                    </div>\n                    <div id=\"controls-wrapper\">\n                        <View \n                            fileName={_currFileName} \n                            darkMode={_darkMode} \n                            head={_dataObj.head} \n                            array={_array} \n                            select={_select} \n                            rangeObj={_range}\n                        />\n                        <div id=\"main-control-group\">\n                            <div id=\"input-and-data-section\">\n                                <div id=\"input-select\">\n                                    <input name=\"file\" id=\"file\" type ='file' hidden onChange={handleUpload} autoComplete=\"off\"/>\n                                    <label htmlFor=\"file\" id=\"input-label\"> <FaUpload/> Upload Additional File </label>\n                                </div>\n                                &nbsp; &nbsp; &nbsp;\n                                <DataSection \n                                    dataSets={_datasets} \n                                    setSelect={setSelect} \n                                    setFileName={setFileName} \n                                    setArray={setArray} \n                                    array={_array} \n                                    setRange={setRange} \n                                    availableFiles={_dataSetNames} \n                                    setData={setData}\n                                />\n                                &nbsp; &nbsp; &nbsp;\n                                <Select \n                                    variables={_dataObj.head} \n                                    status={_dataObj.ready} \n                                    setSelect={setSelect}\n                                />\n                            </div>\n                            <div id=\"range-interval-group\">\n                                <p> Range Interval: </p>\n                                <RangeInterval \n                                    rangeObj={_range} \n                                    setRange={setRange} \n                                    dataReady={_dataObj.ready} \n                                    maxValue={_array.data.length}\n                                />\n                            </div>                            \n                            <Range\n                                dataObj={_dataObj} \n                                setRange={setRange} \n                                rangeObj={_range} \n                                dataArrayLength={_array.data.length} \n                                maxValue={_array.data.length} \n                                dataReady={_dataObj.ready}\n                            /> \n                        </div>\n                    </div>\n                  </div>\n\n                ) : ( \n            \n                <InitInputGroup setColorTheme={setMode} handleUpload={handleUpload}/> )\n            }\n        </div>\n    )\n};\n\nexport default Home;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Home from './components/Home.js';\n\nfunction App(){\n    return(\n        <Home/>\n    )\n}\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}